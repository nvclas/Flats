name: Build

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/

  update-pr-status:
    name: Update PR Status
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Create Status Check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Build Check',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: '${{ needs.build.outputs.build_status }}',
              output: {
                title: 'Build Verification',
                summary: 'Build verification completed with status: ${{ needs.build.outputs.build_status }}'
              }
            });
